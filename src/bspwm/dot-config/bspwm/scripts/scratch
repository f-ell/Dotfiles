#!/usr/bin/bash

# SYNOPSIS
#   /path/to/script INDEX
#
# DESCRIPTION
#   Scratchpads are read to consecutive indices from
#   '$HOME/.config/bspwm/scratchpads' (respects XDG_CONFIG_HOE)
#
#   Scratchpads are read line by line to consecutive indices from
#   '$HOME/.config/bspwm/scratchpads' (respects XDG_CONFIG_HOME when set).
#   Empty lines, lines containing only whitespace, and lines with '#' as the
#   first non-whitespace character are ignored. Each line should conform to the
#   syntax outlined below (see SYNTAX).
#
#   INDEX should be a positive integer and refers to the index of the scratchpad
#   to launch / toggle.
#
# SYNTAX
#   SCRATCHPAD := NAME : COMMAND [: RULE_OPTS]
#
#   Each scratchpad has a name with an associated command and optional window
#   rules.
#
#   Scratchpads are launched with a window class name of 'scratch' and an
#   instance name of 'scratch-NAME'.
#
#   After being expanded using `eval`, COMMAND is passed to a shell for
#   execution. This allows PARAMETER EXPANSION inside of the COMMAND string, but
#   may have catastrophic results with incorrectly set variables.
#
#   RULE_OPTS specifies the window rules for a scratchpad. When present, they
#   are passed verbatim to a oneshot rule when spawning the scratchpad (see
#   bspc(1) 451ff.).
#
# KNOWN BUGS / LIMITATIONS
#   Scratchpad names, commands, or rule modifiers may not contain a literal ':'.
#   Scratchpad names may not contain spaces.
#
# DEPENDENCIES
#   bspc
#   kitty
#   wmctrl

SCRATCH_FILE=${XDG_CONFIG_HOME:-$HOME/.config}/bspwm/scratchpads
OPTS='sticky=on locked=on state=floating'

function err {
  printf 'scratch: %s\n' "$2" 1>&2
  (( $1 > 0 )) && exit $1
}

function toggle { bspc node $1 -g hidden -f; }

function init {
  [[ -f $SCRATCH_FILE && -r $SCRATCH_FILE ]]\
    || err 1 "'$SCRATCH_FILE' doesn't exist or isn't readable"
  [[ $1 =~ [1-9][0-9]* ]] || err 1 'expected index greater than zero'

  while read -r; do
    [[ -z $REPLY || $REPLY =~ (^[[:space:]]+$)|(^[[:space:]]*# ) ]] && continue
    scratchpads+=("$REPLY")
  done < $SCRATCH_FILE

  declare idx=$(( $1 - 1 ))
  (( $1 > ${#scratchpads[@]} )) && err 1 "index $1 out of bounds"

  scratchpad=(${scratchpads[$idx]})
}

function parse_pad {
  local line="${scratchpad[@]}"
  scratchpad=()
  local IFS=:
  for REPLY in $line; do
    REPLY="${REPLY#"${REPLY%%[![:space:]]*}"}"
    REPLY="${REPLY%"${REPLY##*[![:space:]]}"}"
    scratchpad+=("$REPLY")
  done

  # WARN: potentially unsafe; crutch to allow parameter expansion
  scratchpad[1]=`eval "printf \"${scratchpad[1]}\""`

  (( ${#scratchpad[@]} == 2 )) && scratchpad[2]="$OPTS"
  scratchpad[2]="rectangle=960x720+480+180 ${scratchpad[2]}"
}

function toggle_visible {
  while read -a REPLY; do
    [[ ${REPLY[2]#scratch-*.} != scratch ]] && continue

    if [[ ${REPLY[2]%.scratch} == "scratch-${scratchpad[0]}" ]]; then
      exists=1
      toggle ${REPLY[0]}
      err 0 "toggle target (${REPLY[0]})"
    else
      bspc query -N -n ${REPLY[0]}.hidden >/dev/null && continue

      for sp in "${scratchpads[@]}"; do
        sp="${sp%% *}"
        [[ scratch-${sp#* } == "${REPLY[2]%.scratch}" ]] && {
          toggle ${REPLY[0]}
          err 0 "toggle other (${REPLY[0]})"
          break
        }
      done
    fi
  done < <(wmctrl -lx)
}

declare -a scratchpads scratchpad
init $1
parse_pad

declare -i exists=0
toggle_visible

(( $exists == 0 )) && {
  # FIX: allow applications other than kitty
  bspc rule -a scratch:scratch-${scratchpad[0]}:* -o ${scratchpad[2]}\
  && kitty --class scratch --name scratch-${scratchpad[0]} ${scratchpad[1]} &

  sleep .2
  declare nodeid
  while read -a REPLY; do
    [[ ${REPLY[2]%.scratch} == "scratch-${scratchpad[0]}" ]] && {
      nodeid=${REPLY[0]}
      break
    }
  done < <(wmctrl -lx)

  err 0 "spawn scratch-${scratchpad[0]} ($nodeid)"
}

exit 0
